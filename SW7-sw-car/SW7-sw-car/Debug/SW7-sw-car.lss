
SW7-sw-car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800200  0000072c  000007c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000072c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800234  00800234  000007f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000824  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001499  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f4b  00000000  00000000  00001e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007bd  00000000  00000000  00002d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  00003518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e6  00000000  00000000  00003758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004de  00000000  00000000  00003f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000441c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9a c0       	rjmp	.+308    	; 0x1c2 <__vector_35>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e2       	ldi	r30, 0x2C	; 44
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 33       	cpi	r26, 0x34	; 52
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e3       	ldi	r26, 0x34	; 52
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 33       	cpi	r26, 0x36	; 54
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	48 d0       	rcall	.+144    	; 0x1b0 <main>
 120:	03 c3       	rjmp	.+1542   	; 0x728 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z4initv>:
#include "Light.h"
#include "Sound.h"


void init(){
	initMotor();
 124:	e4 d0       	rcall	.+456    	; 0x2ee <_Z9initMotorv>
	initSound();
 126:	39 d1       	rcall	.+626    	; 0x39a <_Z9initSoundv>
	initLight();
 128:	10 c0       	rjmp	.+32     	; 0x14a <_Z9initLightv>
 12a:	08 95       	ret

0000012c <_Z3runv>:
 12c:	82 e0       	ldi	r24, 0x02	; 2
}

void run(){
	playTrack(0x02);
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	62 d1       	rcall	.+708    	; 0x3f6 <_Z9playTracki>
	
	while(isPlaying(0x02))
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	9b d1       	rcall	.+822    	; 0x46e <_Z9isPlayingi>
 138:	81 11       	cpse	r24, r1
 13a:	fb cf       	rjmp	.-10     	; 0x132 <_Z3runv+0x6>
	{
	}
	
	lightOnOff(true);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	15 d0       	rcall	.+42     	; 0x16a <_Z10lightOnOffb>
	backLightIntensity(true);
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	26 d0       	rcall	.+76     	; 0x190 <_Z18backLightIntensityb>
	pwmMotor(70);
 144:	86 e4       	ldi	r24, 0x46	; 70
 146:	bd c0       	rjmp	.+378    	; 0x2c2 <_Z8pwmMotorh>
 148:	08 95       	ret

0000014a <_Z9initLightv>:
 14a:	8f ef       	ldi	r24, 0xFF	; 255
#include <avr/io.h>
#include "Light.h"

void initLight(){
	//Tilfældig port som udgang til forlys
	DDRL = 0xFF;
 14c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	//Baglys. Benytter PORTH, da timer 4 på mega2560 (OC4A = PORTH, ben 3 | 6 på arduino) 
	DDRH = 0xFF;
 150:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
	
	//Slukker lyset som standard
	PORTL = 0;
 154:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	PORTH = 0;	
 158:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
	//Init timer
	// Mode = 3 (PWM, Phase Correct, 10 bit) IKKE FAST MODE
	// Set OC4A on match down counting / Clear OC4A on match up counting
	// Clock prescaler = 1
	TCCR4A = 0b10000011; // bit 0,1 PWM
 15c:	83 e8       	ldi	r24, 0x83	; 131
 15e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
	TCCR4B = 0b00000001; //PRESCALER bit 0
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
 168:	08 95       	ret

0000016a <_Z10lightOnOffb>:
}

void lightOnOff(bool onOff) {
	if (onOff == true) {
 16a:	88 23       	and	r24, r24
 16c:	51 f0       	breq	.+20     	; 0x182 <_Z10lightOnOffb+0x18>
		PORTL = (1<<7); //lightOnOff(true); sender 1 tal på PORTJ ben 7, 79
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
		OCR4A = 204; //BEN 3 PORTH, 15 på arduino	
 174:	8c ec       	ldi	r24, 0xCC	; 204
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 17c:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 180:	08 95       	ret
	}
	else {
		PORTL = 0;
 182:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
		OCR4A = 0;
 186:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 18a:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 18e:	08 95       	ret

00000190 <_Z18backLightIntensityb>:
	}	
}

void backLightIntensity(bool high) {
	if(high == true) {
 190:	88 23       	and	r24, r24
 192:	39 f0       	breq	.+14     	; 0x1a2 <_Z18backLightIntensityb+0x12>
		//Duty cycle 100%
		 OCR4A = 1023;
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	93 e0       	ldi	r25, 0x03	; 3
 198:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 19c:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 1a0:	08 95       	ret
	} else {
		// Duty cycle 20% VED NORMAL
		// D = OCR/TOP. D = 20% OCR = ukendt(løses i CAS program) TOP(afhænger af mode) = 1023
		OCR4A = 204; //PORT E ben 3
 1a2:	8c ec       	ldi	r24, 0xCC	; 204
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 1aa:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 1ae:	08 95       	ret

000001b0 <main>:
{
//  	initMotor();
//  	direction(true);
//  	pwmMotor(0);
//  	testMotor();
	init();
 1b0:	b9 df       	rcall	.-142    	; 0x124 <_Z4initv>
	
    DDRA = 0;
 1b2:	11 b8       	out	0x01, r1	; 1
    DDRB = 0xFF;
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	84 b9       	out	0x04, r24	; 4

    PORTB = 0;
 1b8:	15 b8       	out	0x05, r1	; 5
    
    while(1){
	    
	    if (~PINA & (1 << 0)){
 1ba:	00 99       	sbic	0x00, 0	; 0
		    
		    run();
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <main+0xa>
 1be:	b6 df       	rcall	.-148    	; 0x12c <_Z3runv>
 1c0:	fc cf       	rjmp	.-8      	; 0x1ba <main+0xa>

000001c2 <__vector_35>:
unsigned char currentSpeed = 0; //determins the current speed
unsigned char desiredSpeed = 0; //used for acceleration
bool speedUp = true; 
unsigned char acceleration = 5;

ISR(TIMER3_OVF_vect){
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	0b b6       	in	r0, 0x3b	; 59
 1ce:	0f 92       	push	r0
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	af 93       	push	r26
 1e2:	bf 93       	push	r27
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
	
	//controls the acceleration
	if (speedUp){
 1e8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <speedUp>
 1ec:	88 23       	and	r24, r24
 1ee:	b1 f0       	breq	.+44     	; 0x21c <__vector_35+0x5a>
		if(desiredSpeed >= (currentSpeed+acceleration)){
 1f0:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <__data_end>
 1f4:	63 2f       	mov	r22, r19
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	40 91 35 02 	lds	r20, 0x0235	; 0x800235 <currentSpeed>
 1fc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 200:	82 2f       	mov	r24, r18
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	84 0f       	add	r24, r20
 206:	91 1d       	adc	r25, r1
 208:	68 17       	cp	r22, r24
 20a:	79 07       	cpc	r23, r25
 20c:	24 f0       	brlt	.+8      	; 0x216 <__vector_35+0x54>
			currentSpeed += acceleration;
 20e:	24 0f       	add	r18, r20
 210:	20 93 35 02 	sts	0x0235, r18	; 0x800235 <currentSpeed>
 214:	18 c0       	rjmp	.+48     	; 0x246 <__vector_35+0x84>
		}else{
			currentSpeed = desiredSpeed;
 216:	30 93 35 02 	sts	0x0235, r19	; 0x800235 <currentSpeed>
 21a:	15 c0       	rjmp	.+42     	; 0x246 <__vector_35+0x84>
		}
	}else{
		if(desiredSpeed <= (currentSpeed-acceleration)){
 21c:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <__data_end>
 220:	63 2f       	mov	r22, r19
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <currentSpeed>
 228:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 22c:	82 2f       	mov	r24, r18
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	84 1b       	sub	r24, r20
 232:	91 09       	sbc	r25, r1
 234:	86 17       	cp	r24, r22
 236:	97 07       	cpc	r25, r23
 238:	24 f0       	brlt	.+8      	; 0x242 <__vector_35+0x80>
			currentSpeed -= acceleration;
 23a:	24 1b       	sub	r18, r20
 23c:	20 93 35 02 	sts	0x0235, r18	; 0x800235 <currentSpeed>
 240:	02 c0       	rjmp	.+4      	; 0x246 <__vector_35+0x84>
			}else{
			currentSpeed = desiredSpeed;
 242:	30 93 35 02 	sts	0x0235, r19	; 0x800235 <currentSpeed>
		}
	}
	
	//sets the speed and dir
	int pwmSignal = currentSpeed * 10.2; // 100% = 1020
 246:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <currentSpeed>
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	7c d1       	rcall	.+760    	; 0x54a <__floatsisf>
 252:	23 e3       	ldi	r18, 0x33	; 51
 254:	33 e3       	ldi	r19, 0x33	; 51
 256:	43 e2       	ldi	r20, 0x23	; 35
 258:	51 e4       	ldi	r21, 0x41	; 65
 25a:	db d1       	rcall	.+950    	; 0x612 <__mulsf3>
 25c:	43 d1       	rcall	.+646    	; 0x4e4 <__fixsfsi>
	if (!currentDir)
 25e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <currentDir>
 262:	21 11       	cpse	r18, r1
 264:	09 c0       	rjmp	.+18     	; 0x278 <__vector_35+0xb6>
	{
		OCR1B = 0;
 266:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 26a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
		OCR1A = pwmSignal;
 26e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 272:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 276:	08 c0       	rjmp	.+16     	; 0x288 <__vector_35+0xc6>
	}
	else {
		OCR1A = 0;
 278:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 27c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		OCR1B = pwmSignal;
 280:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 284:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	}
	
	//stops timer interrupts
	if (desiredSpeed == currentSpeed){ 
 288:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <__data_end>
 28c:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <currentSpeed>
 290:	98 13       	cpse	r25, r24
 292:	04 c0       	rjmp	.+8      	; 0x29c <__vector_35+0xda>
		TIMSK3 |= 0b00000000;
 294:	e1 e7       	ldi	r30, 0x71	; 113
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	80 83       	st	Z, r24
	}
}
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0b be       	out	0x3b, r0	; 59
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <_Z8pwmMotorh>:

//TCNT3 = 65536 - 40535;
//TCNT3 = 65500;
//OCR3A = 40535;
void pwmMotor(unsigned char speed){
	if (speed <= 100 && speed >= 0){//checks for valid input
 2c2:	85 36       	cpi	r24, 0x65	; 101
 2c4:	98 f4       	brcc	.+38     	; 0x2ec <_Z8pwmMotorh+0x2a>
		if(currentSpeed != speed){
 2c6:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <currentSpeed>
 2ca:	89 17       	cp	r24, r25
 2cc:	79 f0       	breq	.+30     	; 0x2ec <_Z8pwmMotorh+0x2a>
			if(currentSpeed < speed){
 2ce:	98 17       	cp	r25, r24
 2d0:	20 f4       	brcc	.+8      	; 0x2da <_Z8pwmMotorh+0x18>
				speedUp = true;
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <speedUp>
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <_Z8pwmMotorh+0x1c>
			}else{
				speedUp = false;
 2da:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <speedUp>
			}
			desiredSpeed = speed;
 2de:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <__data_end>
			
			TIMSK3 |= 0b00000001;
 2e2:	e1 e7       	ldi	r30, 0x71	; 113
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	81 60       	ori	r24, 0x01	; 1
 2ea:	80 83       	st	Z, r24
 2ec:	08 95       	ret

000002ee <_Z9initMotorv>:
	if (desiredSpeed == currentSpeed){ 
		TIMSK3 |= 0b00000000;
	}
}

void initMotor(){
 2ee:	cf 93       	push	r28
	DDRB = 0xFF;
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A = 0b10100011;
 2f4:	83 ea       	ldi	r24, 0xA3	; 163
 2f6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000001;
 2fa:	c1 e0       	ldi	r28, 0x01	; 1
 2fc:	c0 93 81 00 	sts	0x0081, r28	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	
	TIMSK3 |= 0b00000000; //no interrupts
 300:	e1 e7       	ldi	r30, 0x71	; 113
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	80 83       	st	Z, r24
	TCCR3A = 0b00000000; //normal mode
 308:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
	TCCR3B = 0b00000010; //prescaler
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
	
	OCR1A = 0;
 312:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 316:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	sei(); // skal i main
 31a:	78 94       	sei
	
	currentDir = true;
 31c:	c0 93 02 02 	sts	0x0202, r28	; 0x800202 <currentDir>
	pwmMotor(0); //currentSpeed = 0  desiredSpeed = 0
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	cf df       	rcall	.-98     	; 0x2c2 <_Z8pwmMotorh>
	speedUp = true;
 324:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <speedUp>
	acceleration = 5;
 328:	85 e0       	ldi	r24, 0x05	; 5
 32a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
}
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <_Z10SendComandPi>:
#include <avr/io.h>
#include <stdlib.h>
#define XTAL 16000000

void SendComand(int comandArr[8])
{
 332:	ac 01       	movw	r20, r24
	for (int i = 0; i < 8; i++)
 334:	20 e0       	ldi	r18, 0x00	; 0
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	28 30       	cpi	r18, 0x08	; 8
 33a:	31 05       	cpc	r19, r1
 33c:	7c f4       	brge	.+30     	; 0x35c <_Z10SendComandPi+0x2a>
	{
		while((UCSR1A & 0b00100000) == 0)
 33e:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 342:	95 ff       	sbrs	r25, 5
 344:	fc cf       	rjmp	.-8      	; 0x33e <_Z10SendComandPi+0xc>
		{
		}
		UDR1 = comandArr[i];
 346:	f9 01       	movw	r30, r18
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	e4 0f       	add	r30, r20
 34e:	f5 1f       	adc	r31, r21
 350:	90 81       	ld	r25, Z
 352:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
#include <stdlib.h>
#define XTAL 16000000

void SendComand(int comandArr[8])
{
	for (int i = 0; i < 8; i++)
 356:	2f 5f       	subi	r18, 0xFF	; 255
 358:	3f 4f       	sbci	r19, 0xFF	; 255
 35a:	ee cf       	rjmp	.-36     	; 0x338 <_Z10SendComandPi+0x6>
 35c:	08 95       	ret

0000035e <_Z11checkComandPi>:
		UDR1 = comandArr[i];
	}
}

bool checkComand(int comandArr[8])
{
 35e:	dc 01       	movw	r26, r24
	for (int i = 0; i < 6; i++)
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	26 30       	cpi	r18, 0x06	; 6
 366:	31 05       	cpc	r19, r1
 368:	a4 f4       	brge	.+40     	; 0x392 <_Z11checkComandPi+0x34>
	{
		while ( (UCSR1A & (1<<7)) == 0 )
 36a:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 36e:	99 23       	and	r25, r25
 370:	e4 f7       	brge	.-8      	; 0x36a <_Z11checkComandPi+0xc>
		{}
		if(comandArr[i] != UDR1){
 372:	f9 01       	movw	r30, r18
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	ea 0f       	add	r30, r26
 37a:	fb 1f       	adc	r31, r27
 37c:	60 81       	ld	r22, Z
 37e:	71 81       	ldd	r23, Z+1	; 0x01
 380:	40 91 ce 00 	lds	r20, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 384:	50 e0       	ldi	r21, 0x00	; 0
 386:	64 17       	cp	r22, r20
 388:	75 07       	cpc	r23, r21
 38a:	29 f4       	brne	.+10     	; 0x396 <_Z11checkComandPi+0x38>
	}
}

bool checkComand(int comandArr[8])
{
	for (int i = 0; i < 6; i++)
 38c:	2f 5f       	subi	r18, 0xFF	; 255
 38e:	3f 4f       	sbci	r19, 0xFF	; 255
 390:	e9 cf       	rjmp	.-46     	; 0x364 <_Z11checkComandPi+0x6>
		{}
		if(comandArr[i] != UDR1){
			return false;
		}
	}
	return true;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	08 95       	ret
	for (int i = 0; i < 6; i++)
	{
		while ( (UCSR1A & (1<<7)) == 0 )
		{}
		if(comandArr[i] != UDR1){
			return false;
 396:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
 398:	08 95       	ret

0000039a <_Z9initSoundv>:

void initSound(){
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	cd b7       	in	r28, 0x3d	; 61
 3a0:	de b7       	in	r29, 0x3e	; 62
 3a2:	60 97       	sbiw	r28, 0x10	; 16
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	f8 94       	cli
 3a8:	de bf       	out	0x3e, r29	; 62
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	cd bf       	out	0x3d, r28	; 61
	//baud mega 2560 = 115200
	// baud target 9600
	//1 stop bit
	//8 data bit
	// no paritet
	UCSR1A = 0b00100000;
 3ae:	80 e2       	ldi	r24, 0x20	; 32
 3b0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
	UCSR1B = 0b00011000;
 3b4:	88 e1       	ldi	r24, 0x18	; 24
 3b6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
	UCSR1C = 0b00000110;
 3ba:	86 e0       	ldi	r24, 0x06	; 6
 3bc:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
	
	unsigned long baudRate = 9600;
	UBRR1 = (XTAL+(8*baudRate))/(16*baudRate)-1;
 3c0:	87 e6       	ldi	r24, 0x67	; 103
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
 3c8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
	
	//sets max volume
	int comand[8] = {0x7E, 0x06, 0x00, 0x00, 0x1E, 0xFF, 0xDC, 0xEF};
 3cc:	80 e1       	ldi	r24, 0x10	; 16
 3ce:	e3 e0       	ldi	r30, 0x03	; 3
 3d0:	f2 e0       	ldi	r31, 0x02	; 2
 3d2:	de 01       	movw	r26, r28
 3d4:	11 96       	adiw	r26, 0x01	; 1
 3d6:	01 90       	ld	r0, Z+
 3d8:	0d 92       	st	X+, r0
 3da:	8a 95       	dec	r24
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <_Z9initSoundv+0x3c>
	SendComand(comand);
 3de:	ce 01       	movw	r24, r28
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	a7 df       	rcall	.-178    	; 0x332 <_Z10SendComandPi>
}
 3e4:	60 96       	adiw	r28, 0x10	; 16
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <_Z9playTracki>:


void playTrack(int trackNum){
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
 3fe:	60 97       	sbiw	r28, 0x10	; 16
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	f8 94       	cli
 404:	de bf       	out	0x3e, r29	; 62
 406:	0f be       	out	0x3f, r0	; 63
 408:	cd bf       	out	0x3d, r28	; 61
	if(trackNum >= 1 && trackNum <= 15){
 40a:	9c 01       	movw	r18, r24
 40c:	21 50       	subi	r18, 0x01	; 1
 40e:	31 09       	sbc	r19, r1
 410:	2f 30       	cpi	r18, 0x0F	; 15
 412:	31 05       	cpc	r19, r1
 414:	18 f5       	brcc	.+70     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 416:	9c 01       	movw	r18, r24
		//7E 03 00 00 (01) FF FC EF  (01) = track 1 op til 16 fx 0A = 10
		int checksum = 0xFFFF - (0x03+0x00+0x00+trackNum)+1; 
 418:	ac 01       	movw	r20, r24
 41a:	4d 5f       	subi	r20, 0xFD	; 253
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	51 95       	neg	r21
 420:	41 95       	neg	r20
 422:	51 09       	sbc	r21, r1
		int comand[8] = {0x7E, 0x03, 0x00, 0x00, trackNum, 0xFF, checksum, 0xEF};
 424:	ce 01       	movw	r24, r28
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	60 e1       	ldi	r22, 0x10	; 16
 42a:	fc 01       	movw	r30, r24
 42c:	11 92       	st	Z+, r1
 42e:	6a 95       	dec	r22
 430:	e9 f7       	brne	.-6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 432:	6e e7       	ldi	r22, 0x7E	; 126
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	7a 83       	std	Y+2, r23	; 0x02
 438:	69 83       	std	Y+1, r22	; 0x01
 43a:	63 e0       	ldi	r22, 0x03	; 3
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	7c 83       	std	Y+4, r23	; 0x04
 440:	6b 83       	std	Y+3, r22	; 0x03
 442:	6f ef       	ldi	r22, 0xFF	; 255
 444:	70 e0       	ldi	r23, 0x00	; 0
 446:	7c 87       	std	Y+12, r23	; 0x0c
 448:	6b 87       	std	Y+11, r22	; 0x0b
 44a:	6f ee       	ldi	r22, 0xEF	; 239
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	78 8b       	std	Y+16, r23	; 0x10
 450:	6f 87       	std	Y+15, r22	; 0x0f
 452:	3a 87       	std	Y+10, r19	; 0x0a
 454:	29 87       	std	Y+9, r18	; 0x09
 456:	5e 87       	std	Y+14, r21	; 0x0e
 458:	4d 87       	std	Y+13, r20	; 0x0d
		SendComand(comand);
 45a:	6b df       	rcall	.-298    	; 0x332 <_Z10SendComandPi>
	}
}
 45c:	60 96       	adiw	r28, 0x10	; 16
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	f8 94       	cli
 462:	de bf       	out	0x3e, r29	; 62
 464:	0f be       	out	0x3f, r0	; 63
 466:	cd bf       	out	0x3d, r28	; 61
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <_Z9isPlayingi>:

bool isPlaying(int trackNum){
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	60 97       	sbiw	r28, 0x10	; 16
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
	//7E 3D 00 00 02 FF C1 EF
	int checksum = 0xFFFF - (0x3D+0x00+0x00+trackNum)+1;
 482:	9c 01       	movw	r18, r24
 484:	23 5c       	subi	r18, 0xC3	; 195
 486:	3f 4f       	sbci	r19, 0xFF	; 255
 488:	31 95       	neg	r19
 48a:	21 95       	neg	r18
 48c:	31 09       	sbc	r19, r1
	int comand[8] = {0x7E, 0x3D, 0x00, 0x00, trackNum, 0xFF, checksum, 0xEF};
 48e:	fe 01       	movw	r30, r28
 490:	31 96       	adiw	r30, 0x01	; 1
 492:	40 e1       	ldi	r20, 0x10	; 16
 494:	df 01       	movw	r26, r30
 496:	1d 92       	st	X+, r1
 498:	4a 95       	dec	r20
 49a:	e9 f7       	brne	.-6      	; 0x496 <_Z9isPlayingi+0x28>
 49c:	4e e7       	ldi	r20, 0x7E	; 126
 49e:	50 e0       	ldi	r21, 0x00	; 0
 4a0:	5a 83       	std	Y+2, r21	; 0x02
 4a2:	49 83       	std	Y+1, r20	; 0x01
 4a4:	4d e3       	ldi	r20, 0x3D	; 61
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	5c 83       	std	Y+4, r21	; 0x04
 4aa:	4b 83       	std	Y+3, r20	; 0x03
 4ac:	4f ef       	ldi	r20, 0xFF	; 255
 4ae:	50 e0       	ldi	r21, 0x00	; 0
 4b0:	5c 87       	std	Y+12, r21	; 0x0c
 4b2:	4b 87       	std	Y+11, r20	; 0x0b
 4b4:	4f ee       	ldi	r20, 0xEF	; 239
 4b6:	50 e0       	ldi	r21, 0x00	; 0
 4b8:	58 8b       	std	Y+16, r21	; 0x10
 4ba:	4f 87       	std	Y+15, r20	; 0x0f
 4bc:	9a 87       	std	Y+10, r25	; 0x0a
 4be:	89 87       	std	Y+9, r24	; 0x09
 4c0:	3e 87       	std	Y+14, r19	; 0x0e
 4c2:	2d 87       	std	Y+13, r18	; 0x0d
	if(checkComand(comand)){
 4c4:	cf 01       	movw	r24, r30
 4c6:	4b df       	rcall	.-362    	; 0x35e <_Z11checkComandPi>
 4c8:	88 23       	and	r24, r24
 4ca:	11 f0       	breq	.+4      	; 0x4d0 <_Z9isPlayingi+0x62>
		return false;
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <_Z9isPlayingi+0x64>
	}else{
		return true;
 4d0:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 4d2:	60 96       	adiw	r28, 0x10	; 16
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	f8 94       	cli
 4d8:	de bf       	out	0x3e, r29	; 62
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	cd bf       	out	0x3d, r28	; 61
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <__fixsfsi>:
 4e4:	04 d0       	rcall	.+8      	; 0x4ee <__fixunssfsi>
 4e6:	68 94       	set
 4e8:	b1 11       	cpse	r27, r1
 4ea:	8d c0       	rjmp	.+282    	; 0x606 <__fp_szero>
 4ec:	08 95       	ret

000004ee <__fixunssfsi>:
 4ee:	70 d0       	rcall	.+224    	; 0x5d0 <__fp_splitA>
 4f0:	88 f0       	brcs	.+34     	; 0x514 <__fixunssfsi+0x26>
 4f2:	9f 57       	subi	r25, 0x7F	; 127
 4f4:	90 f0       	brcs	.+36     	; 0x51a <__fixunssfsi+0x2c>
 4f6:	b9 2f       	mov	r27, r25
 4f8:	99 27       	eor	r25, r25
 4fa:	b7 51       	subi	r27, 0x17	; 23
 4fc:	a0 f0       	brcs	.+40     	; 0x526 <__fixunssfsi+0x38>
 4fe:	d1 f0       	breq	.+52     	; 0x534 <__fixunssfsi+0x46>
 500:	66 0f       	add	r22, r22
 502:	77 1f       	adc	r23, r23
 504:	88 1f       	adc	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	1a f0       	brmi	.+6      	; 0x510 <__fixunssfsi+0x22>
 50a:	ba 95       	dec	r27
 50c:	c9 f7       	brne	.-14     	; 0x500 <__fixunssfsi+0x12>
 50e:	12 c0       	rjmp	.+36     	; 0x534 <__fixunssfsi+0x46>
 510:	b1 30       	cpi	r27, 0x01	; 1
 512:	81 f0       	breq	.+32     	; 0x534 <__fixunssfsi+0x46>
 514:	77 d0       	rcall	.+238    	; 0x604 <__fp_zero>
 516:	b1 e0       	ldi	r27, 0x01	; 1
 518:	08 95       	ret
 51a:	74 c0       	rjmp	.+232    	; 0x604 <__fp_zero>
 51c:	67 2f       	mov	r22, r23
 51e:	78 2f       	mov	r23, r24
 520:	88 27       	eor	r24, r24
 522:	b8 5f       	subi	r27, 0xF8	; 248
 524:	39 f0       	breq	.+14     	; 0x534 <__fixunssfsi+0x46>
 526:	b9 3f       	cpi	r27, 0xF9	; 249
 528:	cc f3       	brlt	.-14     	; 0x51c <__fixunssfsi+0x2e>
 52a:	86 95       	lsr	r24
 52c:	77 95       	ror	r23
 52e:	67 95       	ror	r22
 530:	b3 95       	inc	r27
 532:	d9 f7       	brne	.-10     	; 0x52a <__fixunssfsi+0x3c>
 534:	3e f4       	brtc	.+14     	; 0x544 <__fixunssfsi+0x56>
 536:	90 95       	com	r25
 538:	80 95       	com	r24
 53a:	70 95       	com	r23
 53c:	61 95       	neg	r22
 53e:	7f 4f       	sbci	r23, 0xFF	; 255
 540:	8f 4f       	sbci	r24, 0xFF	; 255
 542:	9f 4f       	sbci	r25, 0xFF	; 255
 544:	08 95       	ret

00000546 <__floatunsisf>:
 546:	e8 94       	clt
 548:	09 c0       	rjmp	.+18     	; 0x55c <__floatsisf+0x12>

0000054a <__floatsisf>:
 54a:	97 fb       	bst	r25, 7
 54c:	3e f4       	brtc	.+14     	; 0x55c <__floatsisf+0x12>
 54e:	90 95       	com	r25
 550:	80 95       	com	r24
 552:	70 95       	com	r23
 554:	61 95       	neg	r22
 556:	7f 4f       	sbci	r23, 0xFF	; 255
 558:	8f 4f       	sbci	r24, 0xFF	; 255
 55a:	9f 4f       	sbci	r25, 0xFF	; 255
 55c:	99 23       	and	r25, r25
 55e:	a9 f0       	breq	.+42     	; 0x58a <__floatsisf+0x40>
 560:	f9 2f       	mov	r31, r25
 562:	96 e9       	ldi	r25, 0x96	; 150
 564:	bb 27       	eor	r27, r27
 566:	93 95       	inc	r25
 568:	f6 95       	lsr	r31
 56a:	87 95       	ror	r24
 56c:	77 95       	ror	r23
 56e:	67 95       	ror	r22
 570:	b7 95       	ror	r27
 572:	f1 11       	cpse	r31, r1
 574:	f8 cf       	rjmp	.-16     	; 0x566 <__floatsisf+0x1c>
 576:	fa f4       	brpl	.+62     	; 0x5b6 <__floatsisf+0x6c>
 578:	bb 0f       	add	r27, r27
 57a:	11 f4       	brne	.+4      	; 0x580 <__floatsisf+0x36>
 57c:	60 ff       	sbrs	r22, 0
 57e:	1b c0       	rjmp	.+54     	; 0x5b6 <__floatsisf+0x6c>
 580:	6f 5f       	subi	r22, 0xFF	; 255
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	8f 4f       	sbci	r24, 0xFF	; 255
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	16 c0       	rjmp	.+44     	; 0x5b6 <__floatsisf+0x6c>
 58a:	88 23       	and	r24, r24
 58c:	11 f0       	breq	.+4      	; 0x592 <__floatsisf+0x48>
 58e:	96 e9       	ldi	r25, 0x96	; 150
 590:	11 c0       	rjmp	.+34     	; 0x5b4 <__floatsisf+0x6a>
 592:	77 23       	and	r23, r23
 594:	21 f0       	breq	.+8      	; 0x59e <__floatsisf+0x54>
 596:	9e e8       	ldi	r25, 0x8E	; 142
 598:	87 2f       	mov	r24, r23
 59a:	76 2f       	mov	r23, r22
 59c:	05 c0       	rjmp	.+10     	; 0x5a8 <__floatsisf+0x5e>
 59e:	66 23       	and	r22, r22
 5a0:	71 f0       	breq	.+28     	; 0x5be <__floatsisf+0x74>
 5a2:	96 e8       	ldi	r25, 0x86	; 134
 5a4:	86 2f       	mov	r24, r22
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	2a f0       	brmi	.+10     	; 0x5b6 <__floatsisf+0x6c>
 5ac:	9a 95       	dec	r25
 5ae:	66 0f       	add	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	88 1f       	adc	r24, r24
 5b4:	da f7       	brpl	.-10     	; 0x5ac <__floatsisf+0x62>
 5b6:	88 0f       	add	r24, r24
 5b8:	96 95       	lsr	r25
 5ba:	87 95       	ror	r24
 5bc:	97 f9       	bld	r25, 7
 5be:	08 95       	ret

000005c0 <__fp_split3>:
 5c0:	57 fd       	sbrc	r21, 7
 5c2:	90 58       	subi	r25, 0x80	; 128
 5c4:	44 0f       	add	r20, r20
 5c6:	55 1f       	adc	r21, r21
 5c8:	59 f0       	breq	.+22     	; 0x5e0 <__fp_splitA+0x10>
 5ca:	5f 3f       	cpi	r21, 0xFF	; 255
 5cc:	71 f0       	breq	.+28     	; 0x5ea <__fp_splitA+0x1a>
 5ce:	47 95       	ror	r20

000005d0 <__fp_splitA>:
 5d0:	88 0f       	add	r24, r24
 5d2:	97 fb       	bst	r25, 7
 5d4:	99 1f       	adc	r25, r25
 5d6:	61 f0       	breq	.+24     	; 0x5f0 <__fp_splitA+0x20>
 5d8:	9f 3f       	cpi	r25, 0xFF	; 255
 5da:	79 f0       	breq	.+30     	; 0x5fa <__fp_splitA+0x2a>
 5dc:	87 95       	ror	r24
 5de:	08 95       	ret
 5e0:	12 16       	cp	r1, r18
 5e2:	13 06       	cpc	r1, r19
 5e4:	14 06       	cpc	r1, r20
 5e6:	55 1f       	adc	r21, r21
 5e8:	f2 cf       	rjmp	.-28     	; 0x5ce <__fp_split3+0xe>
 5ea:	46 95       	lsr	r20
 5ec:	f1 df       	rcall	.-30     	; 0x5d0 <__fp_splitA>
 5ee:	08 c0       	rjmp	.+16     	; 0x600 <__fp_splitA+0x30>
 5f0:	16 16       	cp	r1, r22
 5f2:	17 06       	cpc	r1, r23
 5f4:	18 06       	cpc	r1, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	f1 cf       	rjmp	.-30     	; 0x5dc <__fp_splitA+0xc>
 5fa:	86 95       	lsr	r24
 5fc:	71 05       	cpc	r23, r1
 5fe:	61 05       	cpc	r22, r1
 600:	08 94       	sec
 602:	08 95       	ret

00000604 <__fp_zero>:
 604:	e8 94       	clt

00000606 <__fp_szero>:
 606:	bb 27       	eor	r27, r27
 608:	66 27       	eor	r22, r22
 60a:	77 27       	eor	r23, r23
 60c:	cb 01       	movw	r24, r22
 60e:	97 f9       	bld	r25, 7
 610:	08 95       	ret

00000612 <__mulsf3>:
 612:	0b d0       	rcall	.+22     	; 0x62a <__mulsf3x>
 614:	78 c0       	rjmp	.+240    	; 0x706 <__fp_round>
 616:	69 d0       	rcall	.+210    	; 0x6ea <__fp_pscA>
 618:	28 f0       	brcs	.+10     	; 0x624 <__mulsf3+0x12>
 61a:	6e d0       	rcall	.+220    	; 0x6f8 <__fp_pscB>
 61c:	18 f0       	brcs	.+6      	; 0x624 <__mulsf3+0x12>
 61e:	95 23       	and	r25, r21
 620:	09 f0       	breq	.+2      	; 0x624 <__mulsf3+0x12>
 622:	5a c0       	rjmp	.+180    	; 0x6d8 <__fp_inf>
 624:	5f c0       	rjmp	.+190    	; 0x6e4 <__fp_nan>
 626:	11 24       	eor	r1, r1
 628:	ee cf       	rjmp	.-36     	; 0x606 <__fp_szero>

0000062a <__mulsf3x>:
 62a:	ca df       	rcall	.-108    	; 0x5c0 <__fp_split3>
 62c:	a0 f3       	brcs	.-24     	; 0x616 <__mulsf3+0x4>

0000062e <__mulsf3_pse>:
 62e:	95 9f       	mul	r25, r21
 630:	d1 f3       	breq	.-12     	; 0x626 <__mulsf3+0x14>
 632:	95 0f       	add	r25, r21
 634:	50 e0       	ldi	r21, 0x00	; 0
 636:	55 1f       	adc	r21, r21
 638:	62 9f       	mul	r22, r18
 63a:	f0 01       	movw	r30, r0
 63c:	72 9f       	mul	r23, r18
 63e:	bb 27       	eor	r27, r27
 640:	f0 0d       	add	r31, r0
 642:	b1 1d       	adc	r27, r1
 644:	63 9f       	mul	r22, r19
 646:	aa 27       	eor	r26, r26
 648:	f0 0d       	add	r31, r0
 64a:	b1 1d       	adc	r27, r1
 64c:	aa 1f       	adc	r26, r26
 64e:	64 9f       	mul	r22, r20
 650:	66 27       	eor	r22, r22
 652:	b0 0d       	add	r27, r0
 654:	a1 1d       	adc	r26, r1
 656:	66 1f       	adc	r22, r22
 658:	82 9f       	mul	r24, r18
 65a:	22 27       	eor	r18, r18
 65c:	b0 0d       	add	r27, r0
 65e:	a1 1d       	adc	r26, r1
 660:	62 1f       	adc	r22, r18
 662:	73 9f       	mul	r23, r19
 664:	b0 0d       	add	r27, r0
 666:	a1 1d       	adc	r26, r1
 668:	62 1f       	adc	r22, r18
 66a:	83 9f       	mul	r24, r19
 66c:	a0 0d       	add	r26, r0
 66e:	61 1d       	adc	r22, r1
 670:	22 1f       	adc	r18, r18
 672:	74 9f       	mul	r23, r20
 674:	33 27       	eor	r19, r19
 676:	a0 0d       	add	r26, r0
 678:	61 1d       	adc	r22, r1
 67a:	23 1f       	adc	r18, r19
 67c:	84 9f       	mul	r24, r20
 67e:	60 0d       	add	r22, r0
 680:	21 1d       	adc	r18, r1
 682:	82 2f       	mov	r24, r18
 684:	76 2f       	mov	r23, r22
 686:	6a 2f       	mov	r22, r26
 688:	11 24       	eor	r1, r1
 68a:	9f 57       	subi	r25, 0x7F	; 127
 68c:	50 40       	sbci	r21, 0x00	; 0
 68e:	8a f0       	brmi	.+34     	; 0x6b2 <__mulsf3_pse+0x84>
 690:	e1 f0       	breq	.+56     	; 0x6ca <__mulsf3_pse+0x9c>
 692:	88 23       	and	r24, r24
 694:	4a f0       	brmi	.+18     	; 0x6a8 <__mulsf3_pse+0x7a>
 696:	ee 0f       	add	r30, r30
 698:	ff 1f       	adc	r31, r31
 69a:	bb 1f       	adc	r27, r27
 69c:	66 1f       	adc	r22, r22
 69e:	77 1f       	adc	r23, r23
 6a0:	88 1f       	adc	r24, r24
 6a2:	91 50       	subi	r25, 0x01	; 1
 6a4:	50 40       	sbci	r21, 0x00	; 0
 6a6:	a9 f7       	brne	.-22     	; 0x692 <__mulsf3_pse+0x64>
 6a8:	9e 3f       	cpi	r25, 0xFE	; 254
 6aa:	51 05       	cpc	r21, r1
 6ac:	70 f0       	brcs	.+28     	; 0x6ca <__mulsf3_pse+0x9c>
 6ae:	14 c0       	rjmp	.+40     	; 0x6d8 <__fp_inf>
 6b0:	aa cf       	rjmp	.-172    	; 0x606 <__fp_szero>
 6b2:	5f 3f       	cpi	r21, 0xFF	; 255
 6b4:	ec f3       	brlt	.-6      	; 0x6b0 <__mulsf3_pse+0x82>
 6b6:	98 3e       	cpi	r25, 0xE8	; 232
 6b8:	dc f3       	brlt	.-10     	; 0x6b0 <__mulsf3_pse+0x82>
 6ba:	86 95       	lsr	r24
 6bc:	77 95       	ror	r23
 6be:	67 95       	ror	r22
 6c0:	b7 95       	ror	r27
 6c2:	f7 95       	ror	r31
 6c4:	e7 95       	ror	r30
 6c6:	9f 5f       	subi	r25, 0xFF	; 255
 6c8:	c1 f7       	brne	.-16     	; 0x6ba <__mulsf3_pse+0x8c>
 6ca:	fe 2b       	or	r31, r30
 6cc:	88 0f       	add	r24, r24
 6ce:	91 1d       	adc	r25, r1
 6d0:	96 95       	lsr	r25
 6d2:	87 95       	ror	r24
 6d4:	97 f9       	bld	r25, 7
 6d6:	08 95       	ret

000006d8 <__fp_inf>:
 6d8:	97 f9       	bld	r25, 7
 6da:	9f 67       	ori	r25, 0x7F	; 127
 6dc:	80 e8       	ldi	r24, 0x80	; 128
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	08 95       	ret

000006e4 <__fp_nan>:
 6e4:	9f ef       	ldi	r25, 0xFF	; 255
 6e6:	80 ec       	ldi	r24, 0xC0	; 192
 6e8:	08 95       	ret

000006ea <__fp_pscA>:
 6ea:	00 24       	eor	r0, r0
 6ec:	0a 94       	dec	r0
 6ee:	16 16       	cp	r1, r22
 6f0:	17 06       	cpc	r1, r23
 6f2:	18 06       	cpc	r1, r24
 6f4:	09 06       	cpc	r0, r25
 6f6:	08 95       	ret

000006f8 <__fp_pscB>:
 6f8:	00 24       	eor	r0, r0
 6fa:	0a 94       	dec	r0
 6fc:	12 16       	cp	r1, r18
 6fe:	13 06       	cpc	r1, r19
 700:	14 06       	cpc	r1, r20
 702:	05 06       	cpc	r0, r21
 704:	08 95       	ret

00000706 <__fp_round>:
 706:	09 2e       	mov	r0, r25
 708:	03 94       	inc	r0
 70a:	00 0c       	add	r0, r0
 70c:	11 f4       	brne	.+4      	; 0x712 <__fp_round+0xc>
 70e:	88 23       	and	r24, r24
 710:	52 f0       	brmi	.+20     	; 0x726 <__fp_round+0x20>
 712:	bb 0f       	add	r27, r27
 714:	40 f4       	brcc	.+16     	; 0x726 <__fp_round+0x20>
 716:	bf 2b       	or	r27, r31
 718:	11 f4       	brne	.+4      	; 0x71e <__fp_round+0x18>
 71a:	60 ff       	sbrs	r22, 0
 71c:	04 c0       	rjmp	.+8      	; 0x726 <__fp_round+0x20>
 71e:	6f 5f       	subi	r22, 0xFF	; 255
 720:	7f 4f       	sbci	r23, 0xFF	; 255
 722:	8f 4f       	sbci	r24, 0xFF	; 255
 724:	9f 4f       	sbci	r25, 0xFF	; 255
 726:	08 95       	ret

00000728 <_exit>:
 728:	f8 94       	cli

0000072a <__stop_program>:
 72a:	ff cf       	rjmp	.-2      	; 0x72a <__stop_program>
