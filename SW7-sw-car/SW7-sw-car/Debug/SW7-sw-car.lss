
SW7-sw-car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800200  00000652  000006e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000652  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800234  00800234  0000071a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000071a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000074c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000116c  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc7  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f5  00000000  00000000  00002767  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00002d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070c  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036a  00000000  00000000  00003600  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000396a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4e c0       	rjmp	.+156    	; 0x12a <__vector_35>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e5       	ldi	r30, 0x52	; 82
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 33       	cpi	r26, 0x34	; 52
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e3       	ldi	r26, 0x34	; 52
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 33       	cpi	r26, 0x36	; 54
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	96 c2       	rjmp	.+1324   	; 0x64e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
{
//  	initMotor();
//  	direction(true);
//  	pwmMotor(0);
//  	testMotor();
	initSound();
 124:	98 d0       	rcall	.+304    	; 0x256 <_Z9initSoundv>
	testSound();
 126:	2a d1       	rcall	.+596    	; 0x37c <_Z9testSoundv>
 128:	ff cf       	rjmp	.-2      	; 0x128 <main+0x4>

0000012a <__vector_35>:
 12a:	1f 92       	push	r1
unsigned char currentSpeed = 0; //determins the current speed
unsigned char desiredSpeed = 0; //used for acceleration
bool speedUp = true; 
unsigned char acceleration = 5;

ISR(TIMER3_OVF_vect){
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	0b b6       	in	r0, 0x3b	; 59
 136:	0f 92       	push	r0
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
	
	//controls the acceleration
	if (speedUp){
 150:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <speedUp>
 154:	88 23       	and	r24, r24
 156:	b1 f0       	breq	.+44     	; 0x184 <__vector_35+0x5a>
		if(desiredSpeed >= (currentSpeed+acceleration)){
 158:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <__data_end>
 15c:	63 2f       	mov	r22, r19
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	40 91 35 02 	lds	r20, 0x0235	; 0x800235 <currentSpeed>
 164:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 168:	82 2f       	mov	r24, r18
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	84 0f       	add	r24, r20
 16e:	91 1d       	adc	r25, r1
 170:	68 17       	cp	r22, r24
 172:	79 07       	cpc	r23, r25
 174:	24 f0       	brlt	.+8      	; 0x17e <__vector_35+0x54>
			currentSpeed += acceleration;
 176:	24 0f       	add	r18, r20
 178:	20 93 35 02 	sts	0x0235, r18	; 0x800235 <currentSpeed>
 17c:	18 c0       	rjmp	.+48     	; 0x1ae <__vector_35+0x84>
		}else{
			currentSpeed = desiredSpeed;
 17e:	30 93 35 02 	sts	0x0235, r19	; 0x800235 <currentSpeed>
 182:	15 c0       	rjmp	.+42     	; 0x1ae <__vector_35+0x84>
		}
	}else{
		if(desiredSpeed <= (currentSpeed-acceleration)){
 184:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <__data_end>
 188:	63 2f       	mov	r22, r19
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <currentSpeed>
 190:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 194:	82 2f       	mov	r24, r18
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	84 1b       	sub	r24, r20
 19a:	91 09       	sbc	r25, r1
 19c:	86 17       	cp	r24, r22
 19e:	97 07       	cpc	r25, r23
 1a0:	24 f0       	brlt	.+8      	; 0x1aa <__vector_35+0x80>
			currentSpeed -= acceleration;
 1a2:	24 1b       	sub	r18, r20
 1a4:	20 93 35 02 	sts	0x0235, r18	; 0x800235 <currentSpeed>
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__vector_35+0x84>
			}else{
			currentSpeed = desiredSpeed;
 1aa:	30 93 35 02 	sts	0x0235, r19	; 0x800235 <currentSpeed>
		}
	}
	
	//sets the speed and dir
	int pwmSignal = currentSpeed * 10.2; // 100% = 1020
 1ae:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <currentSpeed>
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	5b d1       	rcall	.+694    	; 0x470 <__floatsisf>
 1ba:	23 e3       	ldi	r18, 0x33	; 51
 1bc:	33 e3       	ldi	r19, 0x33	; 51
 1be:	43 e2       	ldi	r20, 0x23	; 35
 1c0:	51 e4       	ldi	r21, 0x41	; 65
 1c2:	ba d1       	rcall	.+884    	; 0x538 <__mulsf3>
 1c4:	22 d1       	rcall	.+580    	; 0x40a <__fixsfsi>
	if (!currentDir)
 1c6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <currentDir>
 1ca:	21 11       	cpse	r18, r1
 1cc:	09 c0       	rjmp	.+18     	; 0x1e0 <__vector_35+0xb6>
	{
		OCR1B = 0;
 1ce:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 1d2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
		OCR1A = pwmSignal;
 1d6:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 1da:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 1de:	08 c0       	rjmp	.+16     	; 0x1f0 <__vector_35+0xc6>
	}
	else {
		OCR1A = 0;
 1e0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 1e4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		OCR1B = pwmSignal;
 1e8:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 1ec:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	}
	
	//stops timer interrupts
	if (desiredSpeed == currentSpeed){ 
 1f0:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <__data_end>
 1f4:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <currentSpeed>
 1f8:	98 13       	cpse	r25, r24
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <__vector_35+0xda>
		TIMSK3 |= 0b00000000;
 1fc:	e1 e7       	ldi	r30, 0x71	; 113
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	80 83       	st	Z, r24
	}
}
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	4f 91       	pop	r20
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	0b be       	out	0x3b, r0	; 59
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <_Z10SendComandPi>:
#include <avr/io.h>
#include <stdlib.h>
#define XTAL 16000000

void SendComand(int comandArr[8])
{
 22a:	ac 01       	movw	r20, r24
	for (int i = 0; i < 8; i++)
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	28 30       	cpi	r18, 0x08	; 8
 232:	31 05       	cpc	r19, r1
 234:	7c f4       	brge	.+30     	; 0x254 <_Z10SendComandPi+0x2a>
	{
		while((UCSR1A & 0b00100000) == 0)
 236:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 23a:	95 ff       	sbrs	r25, 5
 23c:	fc cf       	rjmp	.-8      	; 0x236 <_Z10SendComandPi+0xc>
		{
		}
		UDR1 = comandArr[i];
 23e:	f9 01       	movw	r30, r18
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	e4 0f       	add	r30, r20
 246:	f5 1f       	adc	r31, r21
 248:	90 81       	ld	r25, Z
 24a:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
#include <stdlib.h>
#define XTAL 16000000

void SendComand(int comandArr[8])
{
	for (int i = 0; i < 8; i++)
 24e:	2f 5f       	subi	r18, 0xFF	; 255
 250:	3f 4f       	sbci	r19, 0xFF	; 255
 252:	ee cf       	rjmp	.-36     	; 0x230 <_Z10SendComandPi+0x6>
 254:	08 95       	ret

00000256 <_Z9initSoundv>:
		UDR1 = comandArr[i];
	}
}


void initSound(){
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	60 97       	sbiw	r28, 0x10	; 16
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
	//baud mega 2560 = 115200
	// baud target 9600
	//1 stop bit
	//8 data bit
	// no paritet
	UCSR1A = 0b00100000;
 26a:	20 e2       	ldi	r18, 0x20	; 32
 26c:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
	
	UCSR1B = 0b00011000;
 270:	98 e1       	ldi	r25, 0x18	; 24
 272:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
	
	UCSR1C = 0b00000110;
 276:	86 e0       	ldi	r24, 0x06	; 6
 278:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
	
	UCSR0A = 0b00100000;
 27c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	
	UCSR0B = 0b00011000;
 280:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	
	UCSR0C = 0b00000110;
 284:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
	
	unsigned long baudRate = 9600;
	UBRR1 = (XTAL+(8*baudRate))/(16*baudRate)-1;
 288:	87 e6       	ldi	r24, 0x67	; 103
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
 290:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
	UBRR0 = (XTAL+(8*baudRate))/(16*baudRate)-1;
 294:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 298:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	//sets max volume
	int comand[8] = {0x7E, 0x06, 0x00, 0x00, 0x1E, 0xFF, 0xDC, 0xEF};
 29c:	80 e1       	ldi	r24, 0x10	; 16
 29e:	e3 e0       	ldi	r30, 0x03	; 3
 2a0:	f2 e0       	ldi	r31, 0x02	; 2
 2a2:	de 01       	movw	r26, r28
 2a4:	11 96       	adiw	r26, 0x01	; 1
 2a6:	01 90       	ld	r0, Z+
 2a8:	0d 92       	st	X+, r0
 2aa:	8a 95       	dec	r24
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <_Z9initSoundv+0x50>
	SendComand(comand);
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	bb df       	rcall	.-138    	; 0x22a <_Z10SendComandPi>
	
}
 2b4:	60 96       	adiw	r28, 0x10	; 16
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <_Z9playTracki>:


void playTrack(int trackNum){
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	60 97       	sbiw	r28, 0x10	; 16
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	cd bf       	out	0x3d, r28	; 61
	if(trackNum >= 1 && trackNum <= 15){
 2da:	9c 01       	movw	r18, r24
 2dc:	21 50       	subi	r18, 0x01	; 1
 2de:	31 09       	sbc	r19, r1
 2e0:	2f 30       	cpi	r18, 0x0F	; 15
 2e2:	31 05       	cpc	r19, r1
 2e4:	18 f5       	brcc	.+70     	; 0x32c <_Z9playTracki+0x66>
 2e6:	9c 01       	movw	r18, r24
		//7E 03 00 00 (01) FF FC EF  (01) = track 1 op til 16 fx 0A = 10
		int checksum = 0xFFFF - (0x03+0x00+0x00+trackNum)+1; 
 2e8:	ac 01       	movw	r20, r24
 2ea:	4d 5f       	subi	r20, 0xFD	; 253
 2ec:	5f 4f       	sbci	r21, 0xFF	; 255
 2ee:	51 95       	neg	r21
 2f0:	41 95       	neg	r20
 2f2:	51 09       	sbc	r21, r1
		int comand[8] = {0x7E, 0x03, 0x00, 0x00, trackNum, 0xFF, checksum, 0xEF};
 2f4:	ce 01       	movw	r24, r28
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	60 e1       	ldi	r22, 0x10	; 16
 2fa:	fc 01       	movw	r30, r24
 2fc:	11 92       	st	Z+, r1
 2fe:	6a 95       	dec	r22
 300:	e9 f7       	brne	.-6      	; 0x2fc <_Z9playTracki+0x36>
 302:	6e e7       	ldi	r22, 0x7E	; 126
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	7a 83       	std	Y+2, r23	; 0x02
 308:	69 83       	std	Y+1, r22	; 0x01
 30a:	63 e0       	ldi	r22, 0x03	; 3
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	7c 83       	std	Y+4, r23	; 0x04
 310:	6b 83       	std	Y+3, r22	; 0x03
 312:	6f ef       	ldi	r22, 0xFF	; 255
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	7c 87       	std	Y+12, r23	; 0x0c
 318:	6b 87       	std	Y+11, r22	; 0x0b
 31a:	6f ee       	ldi	r22, 0xEF	; 239
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	78 8b       	std	Y+16, r23	; 0x10
 320:	6f 87       	std	Y+15, r22	; 0x0f
 322:	3a 87       	std	Y+10, r19	; 0x0a
 324:	29 87       	std	Y+9, r18	; 0x09
 326:	5e 87       	std	Y+14, r21	; 0x0e
 328:	4d 87       	std	Y+13, r20	; 0x0d
		//comand[4] = trackNum;
		SendComand(comand);
 32a:	7f df       	rcall	.-258    	; 0x22a <_Z10SendComandPi>
	}
}
 32c:	60 96       	adiw	r28, 0x10	; 16
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <_Z9stopTrackv>:


void stopTrack(){
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
 346:	60 97       	sbiw	r28, 0x10	; 16
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	f8 94       	cli
 34c:	de bf       	out	0x3e, r29	; 62
 34e:	0f be       	out	0x3f, r0	; 63
 350:	cd bf       	out	0x3d, r28	; 61
	int comand[8] = {0x7E, 0x16, 0x00, 0x00, 0x00, 0xFF, 0xEA, 0xEF};
 352:	80 e1       	ldi	r24, 0x10	; 16
 354:	e3 e1       	ldi	r30, 0x13	; 19
 356:	f2 e0       	ldi	r31, 0x02	; 2
 358:	de 01       	movw	r26, r28
 35a:	11 96       	adiw	r26, 0x01	; 1
 35c:	01 90       	ld	r0, Z+
 35e:	0d 92       	st	X+, r0
 360:	8a 95       	dec	r24
 362:	e1 f7       	brne	.-8      	; 0x35c <_Z9stopTrackv+0x1e>
	SendComand(comand);
 364:	ce 01       	movw	r24, r28
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	60 df       	rcall	.-320    	; 0x22a <_Z10SendComandPi>
}
 36a:	60 96       	adiw	r28, 0x10	; 16
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	08 95       	ret

0000037c <_Z9testSoundv>:


void testSound(){
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
 384:	60 97       	sbiw	r28, 0x10	; 16
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0;
 390:	11 b8       	out	0x01, r1	; 1
	DDRB = 0xFF;
 392:	8f ef       	ldi	r24, 0xFF	; 255
 394:	84 b9       	out	0x04, r24	; 4

	PORTB = 0;
 396:	15 b8       	out	0x05, r1	; 5
	
	while(1){
		
		if((UCSR1A & 0b10000000) == 0){
 398:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 39c:	88 23       	and	r24, r24
 39e:	64 f0       	brlt	.+24     	; 0x3b8 <_Z9testSoundv+0x3c>
			if(UDR1 != 0){
 3a0:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 3a4:	88 23       	and	r24, r24
 3a6:	41 f0       	breq	.+16     	; 0x3b8 <_Z9testSoundv+0x3c>
				while((UCSR0A & 0b00100000) == 0)
 3a8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 3ac:	85 ff       	sbrs	r24, 5
 3ae:	fc cf       	rjmp	.-8      	; 0x3a8 <_Z9testSoundv+0x2c>
				{
				}
				UDR0 = UDR1;
 3b0:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 3b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
			}
		}

		if (~PINA & (1 << 0)){
 3b8:	00 99       	sbic	0x00, 0	; 0
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <_Z9testSoundv+0x46>
			
			playTrack(0x01);
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	82 df       	rcall	.-252    	; 0x2c6 <_Z9playTracki>
		}
		if (~PINA & (1 << 1)){
 3c2:	01 99       	sbic	0x00, 1	; 0
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <_Z9testSoundv+0x50>
			
			playTrack(0x02);
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	7d df       	rcall	.-262    	; 0x2c6 <_Z9playTracki>
		}
		
		if (~PINA & (1 << 5))
 3cc:	05 9b       	sbis	0x00, 5	; 0
		{
			stopTrack();
 3ce:	b7 df       	rcall	.-146    	; 0x33e <_Z9stopTrackv>
 3d0:	06 99       	sbic	0x00, 6	; 0
		}
		if (~PINA & (1 << 6))
 3d2:	0c c0       	rjmp	.+24     	; 0x3ec <_Z9testSoundv+0x70>
 3d4:	80 e1       	ldi	r24, 0x10	; 16
		{
			//sets volume to 5
			int comand[8] = {0x7E, 0x06, 0x00, 0x00, 0x05, 0xFF, 0xF5, 0xEF};
 3d6:	e3 e2       	ldi	r30, 0x23	; 35
 3d8:	f2 e0       	ldi	r31, 0x02	; 2
 3da:	de 01       	movw	r26, r28
 3dc:	11 96       	adiw	r26, 0x01	; 1
 3de:	01 90       	ld	r0, Z+
 3e0:	0d 92       	st	X+, r0
 3e2:	8a 95       	dec	r24
 3e4:	e1 f7       	brne	.-8      	; 0x3de <_Z9testSoundv+0x62>
			SendComand(comand);
 3e6:	ce 01       	movw	r24, r28
 3e8:	01 96       	adiw	r24, 0x01	; 1
 3ea:	1f df       	rcall	.-450    	; 0x22a <_Z10SendComandPi>
 3ec:	07 99       	sbic	0x00, 7	; 0
		}
		if (~PINA & (1 << 7))
 3ee:	d4 cf       	rjmp	.-88     	; 0x398 <_Z9testSoundv+0x1c>
 3f0:	80 e1       	ldi	r24, 0x10	; 16
		{
			//sets max volume
			int comand[8] = {0x7E, 0x06, 0x00, 0x00, 0x1E, 0xFF, 0xDC, 0xEF};
 3f2:	e3 e0       	ldi	r30, 0x03	; 3
 3f4:	f2 e0       	ldi	r31, 0x02	; 2
 3f6:	de 01       	movw	r26, r28
 3f8:	11 96       	adiw	r26, 0x01	; 1
 3fa:	01 90       	ld	r0, Z+
 3fc:	0d 92       	st	X+, r0
 3fe:	8a 95       	dec	r24
 400:	e1 f7       	brne	.-8      	; 0x3fa <_Z9testSoundv+0x7e>
			SendComand(comand);
 402:	ce 01       	movw	r24, r28
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	11 df       	rcall	.-478    	; 0x22a <_Z10SendComandPi>
 408:	c7 cf       	rjmp	.-114    	; 0x398 <_Z9testSoundv+0x1c>

0000040a <__fixsfsi>:
 40a:	04 d0       	rcall	.+8      	; 0x414 <__fixunssfsi>
 40c:	68 94       	set
 40e:	b1 11       	cpse	r27, r1
 410:	8d c0       	rjmp	.+282    	; 0x52c <__fp_szero>
 412:	08 95       	ret

00000414 <__fixunssfsi>:
 414:	70 d0       	rcall	.+224    	; 0x4f6 <__fp_splitA>
 416:	88 f0       	brcs	.+34     	; 0x43a <__fixunssfsi+0x26>
 418:	9f 57       	subi	r25, 0x7F	; 127
 41a:	90 f0       	brcs	.+36     	; 0x440 <__fixunssfsi+0x2c>
 41c:	b9 2f       	mov	r27, r25
 41e:	99 27       	eor	r25, r25
 420:	b7 51       	subi	r27, 0x17	; 23
 422:	a0 f0       	brcs	.+40     	; 0x44c <__fixunssfsi+0x38>
 424:	d1 f0       	breq	.+52     	; 0x45a <__fixunssfsi+0x46>
 426:	66 0f       	add	r22, r22
 428:	77 1f       	adc	r23, r23
 42a:	88 1f       	adc	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	1a f0       	brmi	.+6      	; 0x436 <__fixunssfsi+0x22>
 430:	ba 95       	dec	r27
 432:	c9 f7       	brne	.-14     	; 0x426 <__fixunssfsi+0x12>
 434:	12 c0       	rjmp	.+36     	; 0x45a <__fixunssfsi+0x46>
 436:	b1 30       	cpi	r27, 0x01	; 1
 438:	81 f0       	breq	.+32     	; 0x45a <__fixunssfsi+0x46>
 43a:	77 d0       	rcall	.+238    	; 0x52a <__fp_zero>
 43c:	b1 e0       	ldi	r27, 0x01	; 1
 43e:	08 95       	ret
 440:	74 c0       	rjmp	.+232    	; 0x52a <__fp_zero>
 442:	67 2f       	mov	r22, r23
 444:	78 2f       	mov	r23, r24
 446:	88 27       	eor	r24, r24
 448:	b8 5f       	subi	r27, 0xF8	; 248
 44a:	39 f0       	breq	.+14     	; 0x45a <__fixunssfsi+0x46>
 44c:	b9 3f       	cpi	r27, 0xF9	; 249
 44e:	cc f3       	brlt	.-14     	; 0x442 <__fixunssfsi+0x2e>
 450:	86 95       	lsr	r24
 452:	77 95       	ror	r23
 454:	67 95       	ror	r22
 456:	b3 95       	inc	r27
 458:	d9 f7       	brne	.-10     	; 0x450 <__fixunssfsi+0x3c>
 45a:	3e f4       	brtc	.+14     	; 0x46a <__fixunssfsi+0x56>
 45c:	90 95       	com	r25
 45e:	80 95       	com	r24
 460:	70 95       	com	r23
 462:	61 95       	neg	r22
 464:	7f 4f       	sbci	r23, 0xFF	; 255
 466:	8f 4f       	sbci	r24, 0xFF	; 255
 468:	9f 4f       	sbci	r25, 0xFF	; 255
 46a:	08 95       	ret

0000046c <__floatunsisf>:
 46c:	e8 94       	clt
 46e:	09 c0       	rjmp	.+18     	; 0x482 <__floatsisf+0x12>

00000470 <__floatsisf>:
 470:	97 fb       	bst	r25, 7
 472:	3e f4       	brtc	.+14     	; 0x482 <__floatsisf+0x12>
 474:	90 95       	com	r25
 476:	80 95       	com	r24
 478:	70 95       	com	r23
 47a:	61 95       	neg	r22
 47c:	7f 4f       	sbci	r23, 0xFF	; 255
 47e:	8f 4f       	sbci	r24, 0xFF	; 255
 480:	9f 4f       	sbci	r25, 0xFF	; 255
 482:	99 23       	and	r25, r25
 484:	a9 f0       	breq	.+42     	; 0x4b0 <__floatsisf+0x40>
 486:	f9 2f       	mov	r31, r25
 488:	96 e9       	ldi	r25, 0x96	; 150
 48a:	bb 27       	eor	r27, r27
 48c:	93 95       	inc	r25
 48e:	f6 95       	lsr	r31
 490:	87 95       	ror	r24
 492:	77 95       	ror	r23
 494:	67 95       	ror	r22
 496:	b7 95       	ror	r27
 498:	f1 11       	cpse	r31, r1
 49a:	f8 cf       	rjmp	.-16     	; 0x48c <__floatsisf+0x1c>
 49c:	fa f4       	brpl	.+62     	; 0x4dc <__floatsisf+0x6c>
 49e:	bb 0f       	add	r27, r27
 4a0:	11 f4       	brne	.+4      	; 0x4a6 <__floatsisf+0x36>
 4a2:	60 ff       	sbrs	r22, 0
 4a4:	1b c0       	rjmp	.+54     	; 0x4dc <__floatsisf+0x6c>
 4a6:	6f 5f       	subi	r22, 0xFF	; 255
 4a8:	7f 4f       	sbci	r23, 0xFF	; 255
 4aa:	8f 4f       	sbci	r24, 0xFF	; 255
 4ac:	9f 4f       	sbci	r25, 0xFF	; 255
 4ae:	16 c0       	rjmp	.+44     	; 0x4dc <__floatsisf+0x6c>
 4b0:	88 23       	and	r24, r24
 4b2:	11 f0       	breq	.+4      	; 0x4b8 <__floatsisf+0x48>
 4b4:	96 e9       	ldi	r25, 0x96	; 150
 4b6:	11 c0       	rjmp	.+34     	; 0x4da <__floatsisf+0x6a>
 4b8:	77 23       	and	r23, r23
 4ba:	21 f0       	breq	.+8      	; 0x4c4 <__floatsisf+0x54>
 4bc:	9e e8       	ldi	r25, 0x8E	; 142
 4be:	87 2f       	mov	r24, r23
 4c0:	76 2f       	mov	r23, r22
 4c2:	05 c0       	rjmp	.+10     	; 0x4ce <__floatsisf+0x5e>
 4c4:	66 23       	and	r22, r22
 4c6:	71 f0       	breq	.+28     	; 0x4e4 <__floatsisf+0x74>
 4c8:	96 e8       	ldi	r25, 0x86	; 134
 4ca:	86 2f       	mov	r24, r22
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	2a f0       	brmi	.+10     	; 0x4dc <__floatsisf+0x6c>
 4d2:	9a 95       	dec	r25
 4d4:	66 0f       	add	r22, r22
 4d6:	77 1f       	adc	r23, r23
 4d8:	88 1f       	adc	r24, r24
 4da:	da f7       	brpl	.-10     	; 0x4d2 <__floatsisf+0x62>
 4dc:	88 0f       	add	r24, r24
 4de:	96 95       	lsr	r25
 4e0:	87 95       	ror	r24
 4e2:	97 f9       	bld	r25, 7
 4e4:	08 95       	ret

000004e6 <__fp_split3>:
 4e6:	57 fd       	sbrc	r21, 7
 4e8:	90 58       	subi	r25, 0x80	; 128
 4ea:	44 0f       	add	r20, r20
 4ec:	55 1f       	adc	r21, r21
 4ee:	59 f0       	breq	.+22     	; 0x506 <__fp_splitA+0x10>
 4f0:	5f 3f       	cpi	r21, 0xFF	; 255
 4f2:	71 f0       	breq	.+28     	; 0x510 <__fp_splitA+0x1a>
 4f4:	47 95       	ror	r20

000004f6 <__fp_splitA>:
 4f6:	88 0f       	add	r24, r24
 4f8:	97 fb       	bst	r25, 7
 4fa:	99 1f       	adc	r25, r25
 4fc:	61 f0       	breq	.+24     	; 0x516 <__fp_splitA+0x20>
 4fe:	9f 3f       	cpi	r25, 0xFF	; 255
 500:	79 f0       	breq	.+30     	; 0x520 <__fp_splitA+0x2a>
 502:	87 95       	ror	r24
 504:	08 95       	ret
 506:	12 16       	cp	r1, r18
 508:	13 06       	cpc	r1, r19
 50a:	14 06       	cpc	r1, r20
 50c:	55 1f       	adc	r21, r21
 50e:	f2 cf       	rjmp	.-28     	; 0x4f4 <__fp_split3+0xe>
 510:	46 95       	lsr	r20
 512:	f1 df       	rcall	.-30     	; 0x4f6 <__fp_splitA>
 514:	08 c0       	rjmp	.+16     	; 0x526 <__fp_splitA+0x30>
 516:	16 16       	cp	r1, r22
 518:	17 06       	cpc	r1, r23
 51a:	18 06       	cpc	r1, r24
 51c:	99 1f       	adc	r25, r25
 51e:	f1 cf       	rjmp	.-30     	; 0x502 <__fp_splitA+0xc>
 520:	86 95       	lsr	r24
 522:	71 05       	cpc	r23, r1
 524:	61 05       	cpc	r22, r1
 526:	08 94       	sec
 528:	08 95       	ret

0000052a <__fp_zero>:
 52a:	e8 94       	clt

0000052c <__fp_szero>:
 52c:	bb 27       	eor	r27, r27
 52e:	66 27       	eor	r22, r22
 530:	77 27       	eor	r23, r23
 532:	cb 01       	movw	r24, r22
 534:	97 f9       	bld	r25, 7
 536:	08 95       	ret

00000538 <__mulsf3>:
 538:	0b d0       	rcall	.+22     	; 0x550 <__mulsf3x>
 53a:	78 c0       	rjmp	.+240    	; 0x62c <__fp_round>
 53c:	69 d0       	rcall	.+210    	; 0x610 <__fp_pscA>
 53e:	28 f0       	brcs	.+10     	; 0x54a <__mulsf3+0x12>
 540:	6e d0       	rcall	.+220    	; 0x61e <__fp_pscB>
 542:	18 f0       	brcs	.+6      	; 0x54a <__mulsf3+0x12>
 544:	95 23       	and	r25, r21
 546:	09 f0       	breq	.+2      	; 0x54a <__mulsf3+0x12>
 548:	5a c0       	rjmp	.+180    	; 0x5fe <__fp_inf>
 54a:	5f c0       	rjmp	.+190    	; 0x60a <__fp_nan>
 54c:	11 24       	eor	r1, r1
 54e:	ee cf       	rjmp	.-36     	; 0x52c <__fp_szero>

00000550 <__mulsf3x>:
 550:	ca df       	rcall	.-108    	; 0x4e6 <__fp_split3>
 552:	a0 f3       	brcs	.-24     	; 0x53c <__mulsf3+0x4>

00000554 <__mulsf3_pse>:
 554:	95 9f       	mul	r25, r21
 556:	d1 f3       	breq	.-12     	; 0x54c <__mulsf3+0x14>
 558:	95 0f       	add	r25, r21
 55a:	50 e0       	ldi	r21, 0x00	; 0
 55c:	55 1f       	adc	r21, r21
 55e:	62 9f       	mul	r22, r18
 560:	f0 01       	movw	r30, r0
 562:	72 9f       	mul	r23, r18
 564:	bb 27       	eor	r27, r27
 566:	f0 0d       	add	r31, r0
 568:	b1 1d       	adc	r27, r1
 56a:	63 9f       	mul	r22, r19
 56c:	aa 27       	eor	r26, r26
 56e:	f0 0d       	add	r31, r0
 570:	b1 1d       	adc	r27, r1
 572:	aa 1f       	adc	r26, r26
 574:	64 9f       	mul	r22, r20
 576:	66 27       	eor	r22, r22
 578:	b0 0d       	add	r27, r0
 57a:	a1 1d       	adc	r26, r1
 57c:	66 1f       	adc	r22, r22
 57e:	82 9f       	mul	r24, r18
 580:	22 27       	eor	r18, r18
 582:	b0 0d       	add	r27, r0
 584:	a1 1d       	adc	r26, r1
 586:	62 1f       	adc	r22, r18
 588:	73 9f       	mul	r23, r19
 58a:	b0 0d       	add	r27, r0
 58c:	a1 1d       	adc	r26, r1
 58e:	62 1f       	adc	r22, r18
 590:	83 9f       	mul	r24, r19
 592:	a0 0d       	add	r26, r0
 594:	61 1d       	adc	r22, r1
 596:	22 1f       	adc	r18, r18
 598:	74 9f       	mul	r23, r20
 59a:	33 27       	eor	r19, r19
 59c:	a0 0d       	add	r26, r0
 59e:	61 1d       	adc	r22, r1
 5a0:	23 1f       	adc	r18, r19
 5a2:	84 9f       	mul	r24, r20
 5a4:	60 0d       	add	r22, r0
 5a6:	21 1d       	adc	r18, r1
 5a8:	82 2f       	mov	r24, r18
 5aa:	76 2f       	mov	r23, r22
 5ac:	6a 2f       	mov	r22, r26
 5ae:	11 24       	eor	r1, r1
 5b0:	9f 57       	subi	r25, 0x7F	; 127
 5b2:	50 40       	sbci	r21, 0x00	; 0
 5b4:	8a f0       	brmi	.+34     	; 0x5d8 <__mulsf3_pse+0x84>
 5b6:	e1 f0       	breq	.+56     	; 0x5f0 <__mulsf3_pse+0x9c>
 5b8:	88 23       	and	r24, r24
 5ba:	4a f0       	brmi	.+18     	; 0x5ce <__mulsf3_pse+0x7a>
 5bc:	ee 0f       	add	r30, r30
 5be:	ff 1f       	adc	r31, r31
 5c0:	bb 1f       	adc	r27, r27
 5c2:	66 1f       	adc	r22, r22
 5c4:	77 1f       	adc	r23, r23
 5c6:	88 1f       	adc	r24, r24
 5c8:	91 50       	subi	r25, 0x01	; 1
 5ca:	50 40       	sbci	r21, 0x00	; 0
 5cc:	a9 f7       	brne	.-22     	; 0x5b8 <__mulsf3_pse+0x64>
 5ce:	9e 3f       	cpi	r25, 0xFE	; 254
 5d0:	51 05       	cpc	r21, r1
 5d2:	70 f0       	brcs	.+28     	; 0x5f0 <__mulsf3_pse+0x9c>
 5d4:	14 c0       	rjmp	.+40     	; 0x5fe <__fp_inf>
 5d6:	aa cf       	rjmp	.-172    	; 0x52c <__fp_szero>
 5d8:	5f 3f       	cpi	r21, 0xFF	; 255
 5da:	ec f3       	brlt	.-6      	; 0x5d6 <__mulsf3_pse+0x82>
 5dc:	98 3e       	cpi	r25, 0xE8	; 232
 5de:	dc f3       	brlt	.-10     	; 0x5d6 <__mulsf3_pse+0x82>
 5e0:	86 95       	lsr	r24
 5e2:	77 95       	ror	r23
 5e4:	67 95       	ror	r22
 5e6:	b7 95       	ror	r27
 5e8:	f7 95       	ror	r31
 5ea:	e7 95       	ror	r30
 5ec:	9f 5f       	subi	r25, 0xFF	; 255
 5ee:	c1 f7       	brne	.-16     	; 0x5e0 <__mulsf3_pse+0x8c>
 5f0:	fe 2b       	or	r31, r30
 5f2:	88 0f       	add	r24, r24
 5f4:	91 1d       	adc	r25, r1
 5f6:	96 95       	lsr	r25
 5f8:	87 95       	ror	r24
 5fa:	97 f9       	bld	r25, 7
 5fc:	08 95       	ret

000005fe <__fp_inf>:
 5fe:	97 f9       	bld	r25, 7
 600:	9f 67       	ori	r25, 0x7F	; 127
 602:	80 e8       	ldi	r24, 0x80	; 128
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	08 95       	ret

0000060a <__fp_nan>:
 60a:	9f ef       	ldi	r25, 0xFF	; 255
 60c:	80 ec       	ldi	r24, 0xC0	; 192
 60e:	08 95       	ret

00000610 <__fp_pscA>:
 610:	00 24       	eor	r0, r0
 612:	0a 94       	dec	r0
 614:	16 16       	cp	r1, r22
 616:	17 06       	cpc	r1, r23
 618:	18 06       	cpc	r1, r24
 61a:	09 06       	cpc	r0, r25
 61c:	08 95       	ret

0000061e <__fp_pscB>:
 61e:	00 24       	eor	r0, r0
 620:	0a 94       	dec	r0
 622:	12 16       	cp	r1, r18
 624:	13 06       	cpc	r1, r19
 626:	14 06       	cpc	r1, r20
 628:	05 06       	cpc	r0, r21
 62a:	08 95       	ret

0000062c <__fp_round>:
 62c:	09 2e       	mov	r0, r25
 62e:	03 94       	inc	r0
 630:	00 0c       	add	r0, r0
 632:	11 f4       	brne	.+4      	; 0x638 <__fp_round+0xc>
 634:	88 23       	and	r24, r24
 636:	52 f0       	brmi	.+20     	; 0x64c <__fp_round+0x20>
 638:	bb 0f       	add	r27, r27
 63a:	40 f4       	brcc	.+16     	; 0x64c <__fp_round+0x20>
 63c:	bf 2b       	or	r27, r31
 63e:	11 f4       	brne	.+4      	; 0x644 <__fp_round+0x18>
 640:	60 ff       	sbrs	r22, 0
 642:	04 c0       	rjmp	.+8      	; 0x64c <__fp_round+0x20>
 644:	6f 5f       	subi	r22, 0xFF	; 255
 646:	7f 4f       	sbci	r23, 0xFF	; 255
 648:	8f 4f       	sbci	r24, 0xFF	; 255
 64a:	9f 4f       	sbci	r25, 0xFF	; 255
 64c:	08 95       	ret

0000064e <_exit>:
 64e:	f8 94       	cli

00000650 <__stop_program>:
 650:	ff cf       	rjmp	.-2      	; 0x650 <__stop_program>
